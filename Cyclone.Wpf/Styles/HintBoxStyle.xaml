<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:Cyclone.Wpf.Converters"
                    xmlns:ctl="clr-namespace:Cyclone.Wpf.Controls">
    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="/Cyclone.UI;component/Styles/Resources/StyleResourceCollection.xaml" />
        <ResourceDictionary Source="/Cyclone.UI;component/Styles/ControlStyle.xaml" />
        <ResourceDictionary Source="/Cyclone.UI;component/Styles/FontIconStyle.xaml" />
        <ResourceDictionary Source="/Cyclone.UI;component/Styles/HintBoxItemStyle.xaml" />-->
    </ResourceDictionary.MergedDictionaries>

    <!--<Style x:Key="HintBox.ButtonStyle"
           TargetType="Button">
        <Setter Property="at:FontIconAttacher.FontFamily" Value="{StaticResource BasicIconFont}" />
        <Setter Property="at:FontIconAttacher.FontSize" Value="20" />
        <Setter Property="at:FontIconAttacher.Foreground" Value="{DynamicResource PromptBrush}" />
        <Setter Property="at:FontIconAttacher.HoverForeground" Value="{DynamicResource TextHoverBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <ctl:FontIcon x:Name="FontIcon"
                                      Style="{StaticResource BasicFontIconStyle}" />
                        <ContentPresenter Content="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="FontIcon" Property="IsMouseOver" Value="True">
                            <Setter TargetName="FontIcon" Property="Foreground" Value="{Binding Path=(at:FontIconAttacher.HoverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="BasicHintBoxItemControlTemplate"
                     TargetType="ctl:HintBoxItem">
        <Border x:Name="RootBorder"
                Height="{TemplateBinding Height}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{Binding Path=(at:ControlAttacher.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                SnapsToDevicePixels="True"
                UseLayoutRounding="True">
            <ContentPresenter Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="{Binding Path=(at:ControlAttacher.HoverBackground), RelativeSource={RelativeSource Mode=Self}}" />
            <Setter Property="Foreground" Value="{Binding Path=(at:ControlAttacher.HoverForeground), RelativeSource={RelativeSource Mode=Self}}" />
            <Setter Property="BorderBrush" Value="{Binding Path=(at:ControlAttacher.HoverBorderBrush), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="BasicHintBoxBoxItemStyle"
           BasedOn="{StaticResource BasicControlStyle}"
           TargetType="ctl:HintBoxItem">
        <Setter Property="Template" Value="{StaticResource BasicHintBoxItemControlTemplate}" />
        <Setter Property="Height" Value="{DynamicResource HorizontalControlHeight}" />
        <Setter Property="Background" Value="{DynamicResource NormalTransparent}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{Binding Path=(at:ControlAttacher.HoverBackground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="Foreground" Value="{Binding Path=(at:ControlAttacher.HoverForeground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(at:ControlAttacher.HoverBorderBrush), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding Path=(at:ControlAttacher.HoverBackground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="Foreground" Value="{Binding Path=(at:ControlAttacher.HoverForeground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(at:ControlAttacher.HoverBorderBrush), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{Binding Path=(at:ControlAttacher.SelectedBackground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="Foreground" Value="{Binding Path=(at:ControlAttacher.SelectedForeground), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(at:ControlAttacher.SelectedBorderBrush), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HintBox.InputTextBoxStyle"
           TargetType="TextBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextContentBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            SnapsToDevicePixels="True"
                            UseLayoutRounding="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="BasicHintBoxControlTemplate"
                     TargetType="ctl:HintBox">
        <Border Name="RootBorder"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{Binding Path=(at:ControlAttacher.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                SnapsToDevicePixels="True"
                UseLayoutRounding="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid x:Name="PresenterGrid"
                      Grid.Column="0">
                    <Popup x:Name="PART_DisplayPopup"
                           at:PopupBoxAttacher.IsPositionUpdate="True"
                           at:PopupBoxAttacher.IsTopmost="False"
                           AllowsTransparency="true"
                           IsOpen="{TemplateBinding IsOpenPopup}"
                           Placement="Bottom"
                           PlacementTarget="{Binding ElementName=RootBorder}"
                           PopupAnimation="Slide"
                           StaysOpen="True">
                        <Border x:Name="ExpansionBorder"
                                Width="{Binding ElementName=RootBorder, Path=ActualWidth}"
                                Background="{DynamicResource ReverseBackground}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="DropDownScrollViewer"
                                          ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                          ScrollViewer.VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter MinHeight="32"
                                                KeyboardNavigation.DirectionalNavigation="Continue" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                    <TextBox x:Name="PART_InputTextBox"
                             Width="{Binding ActualWidth, ElementName=PresenterGrid}"
                             Background="Transparent"
                             Style="{StaticResource HintBox.InputTextBoxStyle}"
                             Text="{Binding Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                </Grid>
                <Button x:Name="PART_ClearTextButton"
                        Grid.Column="1"
                        Margin="0,0,5,0"
                        at:FontIconAttacher.Icon="&#xe62d;"
                        Command="{x:Static ctl:HintBox.ClearTextCommand}"
                        Focusable="False"
                        IsTabStop="False"
                        Style="{StaticResource HintBox.ButtonStyle}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_InputTextBox" Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsOpenPopup" Value="True" />
                <Setter Property="Foreground" Value="{Binding Path=(at:ControlAttacher.EditingForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="RootBorder" Property="Background" Value="{Binding Path=(at:ControlAttacher.EditingBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="RootBorder" Property="BorderBrush" Value="{Binding Path=(at:ControlAttacher.EditingBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static k:StyleKeys.HintBox}"
           BasedOn="{StaticResource BasicControlStyle}"
           TargetType="ctl:HintBox">
        <Setter Property="Template" Value="{StaticResource BasicHintBoxControlTemplate}" />
        <Setter Property="Height" Value="{DynamicResource HorizontalControlHeight}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThicknessNormal}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static k:StyleKeys.HintBoxItem}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>-->
</ResourceDictionary>