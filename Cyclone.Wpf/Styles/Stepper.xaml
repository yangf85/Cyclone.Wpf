<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctl="clr-namespace:Cyclone.Wpf.Controls"
                    xmlns:conv="clr-namespace:Cyclone.Wpf.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Cyclone.Wpf;component/Themes/BasicTheme.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- 默认连接器样式：水平线 -->
    <Style x:Key="HorizontalConnectorStyle" TargetType="Line">
        <Setter Property="Stroke" Value="{DynamicResource Border.Inactive}" />
        <Setter Property="StrokeThickness" Value="1.5" />
        <Setter Property="X1" Value="0" />
        <Setter Property="Y1" Value="0" />
        <Setter Property="X2" Value="40" />
        <Setter Property="Y2" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!-- 默认激活连接器样式：水平线 -->
    <Style x:Key="HorizontalActiveConnectorStyle" TargetType="Line">
        <Setter Property="Stroke" Value="{DynamicResource Border.Active}" />
        <Setter Property="StrokeThickness" Value="1.5" />
        <Setter Property="X1" Value="0" />
        <Setter Property="Y1" Value="0" />
        <Setter Property="X2" Value="40" />
        <Setter Property="Y2" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!-- 默认连接器样式：垂直线 -->
    <Style x:Key="VerticalConnectorStyle" TargetType="Line">
        <Setter Property="Stroke" Value="{DynamicResource Border.Inactive}" />
        <Setter Property="StrokeThickness" Value="1.5" />
        <Setter Property="X1" Value="0" />
        <Setter Property="Y1" Value="0" />
        <Setter Property="X2" Value="0" />
        <Setter Property="Y2" Value="40" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!-- 默认激活连接器样式：垂直线 -->
    <Style x:Key="VerticalActiveConnectorStyle" TargetType="Line">
        <Setter Property="Stroke" Value="{DynamicResource Border.Active}" />
        <Setter Property="StrokeThickness" Value="1.5" />
        <Setter Property="X1" Value="0" />
        <Setter Property="Y1" Value="0" />
        <Setter Property="X2" Value="0" />
        <Setter Property="Y2" Value="40" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!-- 默认连接器模板：水平 -->
    <DataTemplate x:Key="DefaultHorizontalConnectorTemplate">
        <Line Style="{StaticResource HorizontalConnectorStyle}" />
    </DataTemplate>

    <!-- 默认激活连接器模板：水平 -->
    <DataTemplate x:Key="DefaultHorizontalActiveConnectorTemplate">
        <Line Style="{StaticResource HorizontalActiveConnectorStyle}" />
    </DataTemplate>

    <!-- 默认连接器模板：垂直 -->
    <DataTemplate x:Key="DefaultVerticalConnectorTemplate">
        <Line Style="{StaticResource VerticalConnectorStyle}" />
    </DataTemplate>

    <!-- 默认激活连接器模板：垂直 -->
    <DataTemplate x:Key="DefaultVerticalActiveConnectorTemplate">
        <Line Style="{StaticResource VerticalActiveConnectorStyle}" />
    </DataTemplate>

    <!-- StepperItem 样式 -->
    <Style TargetType="{x:Type ctl:StepperItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IconBackground" Value="{DynamicResource Background.Inactive}" />
        <Setter Property="CompletedIconBackground" Value="{DynamicResource Background.Success}" />
        <Setter Property="CurrentIconBackground" Value="{DynamicResource Background.Active}" />
        <Setter Property="IconForeground" Value="{DynamicResource Foreground.Inactive}" />
        <Setter Property="CompletedIconForeground" Value="{DynamicResource Foreground.Active}" />
        <Setter Property="CurrentIconForeground" Value="{DynamicResource Foreground.Active}" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctl:StepperItem}">
                    <Grid>
                        <Grid.Resources>
                            <!-- 图标样式 -->
                            <Style x:Key="StepIconStyle" TargetType="Border">
                                <Setter Property="Width" Value="32" />
                                <Setter Property="Height" Value="32" />
                                <Setter Property="CornerRadius" Value="16" />
                                <Setter Property="Background" Value="{Binding IconBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Style.Triggers>
                                    <!-- 已完成状态 -->
                                    <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Completed">
                                        <Setter Property="Background" Value="{Binding CompletedIconBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </DataTrigger>
                                    <!-- 当前状态 -->
                                    <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Current">
                                        <Setter Property="Background" Value="{Binding CurrentIconBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </DataTrigger>
                                    <!-- 错误状态 -->
                                    <DataTrigger Binding="{Binding HasError, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource Background.Error}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>

                        <!-- 水平布局 -->
                        <Grid x:Name="PART_HorizontalLayout">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- 步骤图标 -->
                            <Grid Grid.Column="0" VerticalAlignment="Center">
                                <Border x:Name="StepIconBorder" Style="{StaticResource StepIconStyle}"
                                        HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <!-- 步骤数字 -->
                                    <TextBlock x:Name="StepNumberTextBlock"
                                               Text="{Binding StepNumber, RelativeSource={RelativeSource TemplatedParent}}"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Foreground="{Binding IconForeground, RelativeSource={RelativeSource TemplatedParent}}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <!-- 已完成状态显示对勾图标 -->
                                                    <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Completed">
                                                        <Setter Property="Text" Value="✓" />
                                                        <Setter Property="Foreground" Value="{Binding CompletedIconForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    </DataTrigger>
                                                    <!-- 当前状态 -->
                                                    <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Current">
                                                        <Setter Property="Foreground" Value="{Binding CurrentIconForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    </DataTrigger>
                                                    <!-- 错误状态显示错误图标 -->
                                                    <DataTrigger Binding="{Binding HasError, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                        <Setter Property="Text" Value="!" />
                                                        <Setter Property="Foreground" Value="{DynamicResource Foreground.Error}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </Border>
                            </Grid>

                            <!-- 步骤内容 -->
                            <StackPanel Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left">
                                <!-- 步骤标题 -->
                                <TextBlock x:Name="HeaderTextBlock"
                                           Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"
                                           FontWeight="Bold"
                                           Foreground="{DynamicResource Text.Header}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <!-- 已完成状态 -->
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Completed">
                                                    <Setter Property="Foreground" Value="{DynamicResource Text.Header}" />
                                                </DataTrigger>
                                                <!-- 当前状态 -->
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Current">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Active}" />
                                                </DataTrigger>
                                                <!-- 待处理状态 -->
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Pending">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Inactive}" />
                                                </DataTrigger>
                                                <!-- 错误状态 -->
                                                <DataTrigger Binding="{Binding HasError, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Error}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <!-- 步骤描述 -->
                                <TextBlock x:Name="DescriptionTextBlock"
                                           Text="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                                           Foreground="{DynamicResource Text.Content}"
                                           TextWrapping="Wrap"
                                           Margin="0,3,0,0">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static conv:VisibilityConverter.VisibleWhenNullOrEmpty}}" Value="Visible">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>
                                                <!-- 待处理状态 -->
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Pending">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Inactive}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>

                            <!-- 连接器 -->
                            <ContentControl Grid.Column="2"
                                          Margin="10,0,0,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Visibility="{Binding HasConnector, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static conv:BooleanConverter.ToVisibility}}">
                                <!-- 根据连接器状态选择不同的模板 -->
                                <ContentControl.Style>
                                    <Style TargetType="ContentControl">
                                        <Setter Property="ContentTemplate" Value="{Binding ParentStepper.ConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Style.Triggers>
                                            <!-- 活动状态 -->
                                            <DataTrigger Binding="{Binding IsConnectorActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <Setter Property="ContentTemplate" Value="{Binding ParentStepper.ActiveConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                                            </DataTrigger>
                                            <!-- 水平方向默认模板 -->
                                            <DataTrigger Binding="{Binding ParentStepper.ConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource DefaultHorizontalConnectorTemplate}" />
                                            </DataTrigger>
                                            <!-- 水平方向活动状态默认模板 -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding ParentStepper.ActiveConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}" />
                                                    <Condition Binding="{Binding IsConnectorActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="ContentTemplate" Value="{StaticResource DefaultHorizontalActiveConnectorTemplate}" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentControl.Style>
                                <!-- 连接器内容 -->
                                <ContentControl.Content>
                                    <Binding Path="ConnectorContent" RelativeSource="{RelativeSource TemplatedParent}" />
                                </ContentControl.Content>
                            </ContentControl>
                        </Grid>

                        <!-- 垂直布局 -->
                        <Grid x:Name="PART_VerticalLayout" Visibility="Collapsed">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- 步骤图标 -->
                            <Border Grid.Row="0" Style="{StaticResource StepIconStyle}"
                                    HorizontalAlignment="Center" VerticalAlignment="Center">
                                <TextBlock Text="{Binding StepNumber, RelativeSource={RelativeSource TemplatedParent}}"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Foreground="{Binding IconForeground, RelativeSource={RelativeSource TemplatedParent}}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Completed">
                                                    <Setter Property="Text" Value="✓" />
                                                    <Setter Property="Foreground" Value="{Binding CompletedIconForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Current">
                                                    <Setter Property="Foreground" Value="{Binding CurrentIconForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding HasError, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Text" Value="!" />
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Error}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Border>

                            <!-- 步骤内容 -->
                            <StackPanel Grid.Row="1" Margin="0,5,0,0" HorizontalAlignment="Center">
                                <!-- 步骤标题 -->
                                <TextBlock Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"
                                           FontWeight="Bold"
                                           HorizontalAlignment="Center"
                                           Foreground="{DynamicResource Text.Header}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Completed">
                                                    <Setter Property="Foreground" Value="{DynamicResource Text.Header}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Current">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Active}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Pending">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Inactive}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding HasError, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Error}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <!-- 步骤描述 -->
                                <TextBlock Text="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                                           Foreground="{DynamicResource Text.Content}"
                                           TextWrapping="Wrap"
                                           TextAlignment="Center"
                                           Margin="0,3,0,0">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static conv:VisibilityConverter.VisibleWhenNullOrEmpty}}" Value="Visible">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="Pending">
                                                    <Setter Property="Foreground" Value="{DynamicResource Foreground.Inactive}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>

                            <!-- 垂直连接器 -->
                            <ContentControl Grid.Row="2"
                                          Margin="0,10,0,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Visibility="{Binding HasConnector, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static conv:BooleanConverter.ToVisibility}}">
                                <ContentControl.Style>
                                    <Style TargetType="ContentControl">
                                        <Setter Property="ContentTemplate" Value="{Binding ParentStepper.ConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Style.Triggers>
                                            <!-- 活动状态 -->
                                            <DataTrigger Binding="{Binding IsConnectorActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <Setter Property="ContentTemplate" Value="{Binding ParentStepper.ActiveConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                                            </DataTrigger>
                                            <!-- 垂直方向默认模板 -->
                                            <DataTrigger Binding="{Binding ParentStepper.ConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource DefaultVerticalConnectorTemplate}" />
                                            </DataTrigger>
                                            <!-- 垂直方向活动状态默认模板 -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding ParentStepper.ActiveConnectorTemplate, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}" />
                                                    <Condition Binding="{Binding IsConnectorActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="ContentTemplate" Value="{StaticResource DefaultVerticalActiveConnectorTemplate}" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentControl.Style>
                                <ContentControl.Content>
                                    <Binding Path="ConnectorContent" RelativeSource="{RelativeSource TemplatedParent}" />
                                </ContentControl.Content>
                            </ContentControl>
                        </Grid>
                    </Grid>

                    <!-- 布局切换触发器 -->
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ParentStepper.Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter TargetName="PART_HorizontalLayout" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_VerticalLayout" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Stepper 样式 -->
    <Style TargetType="{x:Type ctl:Stepper}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="StepSpacing" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctl:Stepper}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- 设置ItemsPanel模板 -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!-- 方向改变时切换ItemsPanel -->
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Vertical" IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>